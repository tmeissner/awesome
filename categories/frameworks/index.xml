<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Frameworks on Awesome resources for Hardware Description</title>
    <link>https://hdl.github.io/awesome/categories/frameworks/</link>
    <description>Recent content in Frameworks on Awesome resources for Hardware Description</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://hdl.github.io/awesome/categories/frameworks/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Chisel/FIRRTL Hardware Compiler Framework</title>
      <link>https://hdl.github.io/awesome/items/chisel/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/chisel/</guid>
      <description>&amp;ldquo;Chisel adds hardware construction primitives to the Scala programming language, providing designers with the power of a modern programming language to write complex, parameterizable circuit generators that produce synthesizable Verilog. This generator methodology enables the creation of re-usable components and libraries, such as the FIFO queue and arbiters in the Chisel Standard Library, raising the level of abstraction in design while retaining fine-grained control.&amp;quot;
 Currently, Chisel (Constructing Hardware in a Scala Embedded Language) is in its version 3 (first commit in 2015).</description>
    </item>
    
    <item>
      <title>Coroutine Co-simulation Test Bench (cocotb)</title>
      <link>https://hdl.github.io/awesome/items/cocotb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/cocotb/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;cocotb is a coroutine based cosimulation library for writing VHDL and Verilog testbenches in Python.&amp;quot;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>migen</title>
      <link>https://hdl.github.io/awesome/items/migen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/migen/</guid>
      <description>&amp;ldquo;Despite being faster than schematics entry, hardware design with Verilog and VHDL remains tedious and inefficient for several reasons. The event-driven model introduces issues and manual coding that are unnecessary for synchronous circuits [&amp;hellip;]. To address those issues, we have developed the Migen FHDL, a library that replaces the event-driven paradigm with the notions of combinatorial and synchronous statements, has arithmetic rules that make integers always behave like mathematical integers, and most importantly allows the design&amp;rsquo;s logic to be constructed by a Python program.</description>
    </item>
    
    <item>
      <title>MyHDL</title>
      <link>https://hdl.github.io/awesome/items/myhdl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/myhdl/</guid>
      <description>&amp;ldquo;MyHDL turns Python into a hardware description and verification language, providing hardware engineers with the power of the Python ecosystem.&amp;quot;</description>
    </item>
    
    <item>
      <title>nMigen</title>
      <link>https://hdl.github.io/awesome/items/nmigen/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/nmigen/</guid>
      <description>&amp;ldquo;Despite being faster than schematics entry, hardware design with Verilog and VHDL remains tedious and inefficient for several reasons. The event-driven model introduces issues and manual coding that are unnecessary for synchronous circuits [&amp;hellip;]. To address those issues, we have developed the Migen FHDL, a library that replaces the event-driven paradigm with the notions of combinatorial and synchronous statements, has arithmetic rules that make integers always behave like mathematical integers, and most importantly allows the design&amp;rsquo;s logic to be constructed by a Python program.</description>
    </item>
    
    <item>
      <title>Open Source VHDL Verification Methodology (OSVVM)</title>
      <link>https://hdl.github.io/awesome/items/osvvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/osvvm/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;Open Source VHDL Verification Methodology (OSVVM) provides an ASIC level VHDL verification methodology that is simple enough to use even on small FPGA projects. OSVVM offers the same capabilities as those based on other verification languages:&amp;quot;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Silice</title>
      <link>https://hdl.github.io/awesome/items/silice/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/silice/</guid>
      <description>&amp;ldquo;Silice makes it possible to write algorithms for FPGAs in the same way we write them for processors: defining sequences of operations, subroutines that can be called, and using control flow statements such as while and break. At the same time, Silice lets you fully exploit the parallelism and niceties of FPGA architectures, describing operations and algorithms that run in parallel and are always active, as well as pipelines. Silice remains close to the hardware: nothing gets obfuscated away.</description>
    </item>
    
    <item>
      <title>SpinalHDL</title>
      <link>https://hdl.github.io/awesome/items/spinalhdl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/spinalhdl/</guid>
      <description>&amp;ldquo;SpinalHDL is an open source high-level hardware description language. It can be used as an alternative to VHDL or Verilog and has several advantages over them.&amp;quot;</description>
    </item>
    
    <item>
      <title>SVUnit</title>
      <link>https://hdl.github.io/awesome/items/svunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/svunit/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;SVUnit is an open-source test framework for ASIC and FPGA developers writing Verilog/SystemVerilog code. SVUnit is automated, fast, lightweight and easy to use making it the only SystemVerilog test framework in existence suited to both design and verification engineers that aspire to high quality code and low bug rates.&amp;quot;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Universal VHDL Verification Methodology (UVVM)</title>
      <link>https://hdl.github.io/awesome/items/uvvm/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/uvvm/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;Open Source VHDL Verification Library and Methodology - for very efficient VHDL verification of FPGA and ASIC - resulting also in a significant quality improvement&amp;rdquo;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Verilog to Routing (VTR)</title>
      <link>https://hdl.github.io/awesome/items/vtr/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/vtr/</guid>
      <description>&amp;ldquo;The Verilog-to-Routing (VTR) project is a world-wide collaborative effort to provide a open-source framework for conducting FPGA architecture and CAD research and development. The VTR design flow takes as input a Verilog description of a digital circuit, and a description of the target FPGA architecture.&amp;quot;
It performs:
 Elaboration &amp;amp; Synthesis (ODIN II) Logic Optimization &amp;amp; Technology Mapping (ABC) Packing, Placement, Routing &amp;amp; Timing Analysis (VPR)  &amp;ldquo;to generate FPGA speed and area results.</description>
    </item>
    
    <item>
      <title>VUnit</title>
      <link>https://hdl.github.io/awesome/items/vunit/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://hdl.github.io/awesome/items/vunit/</guid>
      <description>&lt;p&gt;&lt;em&gt;&amp;ldquo;VUnit is an open source unit testing framework for VHDL/SystemVerilog [&amp;hellip;]  It features the functionality needed to realize continuous and automated testing of your HDL code. VUnit doesn’t replace but rather complements traditional testing methodologies by supporting a “test early and often” approach through automation.&amp;quot;&lt;/em&gt;&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
